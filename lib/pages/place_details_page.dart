import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:first_maps_project/widgets/models/place_information.dart';
import 'package:first_maps_project/widgets/models/map_marker.dart';
import 'package:first_maps_project/widgets/google_maps/map_view.dart';
import 'package:first_maps_project/services/firebase_markers_service.dart';

class PlaceDetailsPage extends StatefulWidget {
  final PlaceInformation place;
  final GlobalKey<MapViewState> mapViewKey;
  final String? markerId;

  const PlaceDetailsPage({
    super.key,
    required this.place,
    required this.mapViewKey,
    this.markerId,
  });

  @override
  State<PlaceDetailsPage> createState() => _PlaceDetailsPageState();
}

class _PlaceDetailsPageState extends State<PlaceDetailsPage> {
  final FirebaseMarkersService _markersService = FirebaseMarkersService();

  String? _mapId;
  String? _markerId;
  late bool _saved;

  @override
  void initState() {
    super.initState();
    _mapId = widget.mapViewKey.currentState?.widget.currentMapId;
    _markerId = widget.markerId;
    _saved = widget.markerId != null;
  }

  /// Adds this place as a marker with autogenerated ID
  Future<void> _addPlace() async {
    if (_mapId == null) return;
    // Build a marker without specifying markerId; Firestore will generate one
    final tempMarker = MapMarker(
      markerId: null,
      detailsId: widget.place.placeId,
      mapId: _mapId!,
      information: widget.place,
    );
    // Save and get generated ID
    final mapMarker = await tempMarker.save(_markersService);

    setState(() { 
      _markerId = mapMarker.markerId;
      _saved = true;
    });
    // Reflect on map
    widget.mapViewKey.currentState?.addMarker(mapMarker);
    _showSnack('‚úÖ Lugar agregado correctamente');
  }

  /// Removes the existing marker
  Future<void> _removePlace() async {
    if (_markerId == null) return;
    // Remove from 'markers' collection
    await _markersService.removeMarker(_markerId!);
    // Reflect on map
    widget.mapViewKey.currentState?.removeMarkerById(_markerId!);
    setState(()  {
      _markerId = null;
      _saved = false;
      });
    _showSnack('üóëÔ∏è Lugar eliminado');
  }

  void _showSnack(String message) {
    ScaffoldMessenger.of(
      context,
    ).showSnackBar(SnackBar(content: Text(message)));
  }

  @override
  Widget build(BuildContext context) {
    final place = widget.place;

    return Scaffold(
      appBar: AppBar(title: Text(place.name)),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "üìç ${place.name}",
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 8),
            Text(
              place.address ?? "no data",
              style: Theme.of(context).textTheme.bodyLarge,
            ),
            const SizedBox(height: 24),
            Text(
              place.location != null
                  ? "üó∫Ô∏è Coordenadas: ${place.location!.latitude}, ${place.location!.longitude}"
                  : "üó∫Ô∏è Coordenadas: no data",
            ),
            const SizedBox(height: 32),

            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _saved ? null : _addPlace,
                    icon: const Icon(Icons.add_location_alt),
                    label: const Text("Agregar"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          _saved ? Colors.grey : Colors.green,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: _saved ? _removePlace : null,
                    icon: const Icon(Icons.delete_outline),
                    label: const Text("Eliminar"),
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          _saved ? Colors.red : Colors.grey,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
